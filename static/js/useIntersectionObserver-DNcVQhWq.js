import{_ as p}from"./index-BqNn1QRp.js";import{_ as u}from"./index-ncGf53PB.js";import{r as n,av as m,e as v,i as o,w as a,o as b,j as e}from"./index-H_c7H9_6.js";import{_ as f}from"./_plugin-vue_export-helper-DlAUqK2U.js";import"./index-m1hp8roE.js";const d={class:"useIntersectionObserver"},I={__name:"useIntersectionObserver",setup(O){const r=n(null),_=n(!1),{stop:c}=m(r,([{isIntersecting:s}],t)=>{_.value=s,s&&c()});return(s,t)=>{const l=u,i=p;return b(),v("div",d,[o(l,{title:"欢迎使用 useIntersectionObserver"},{content:a(()=>t[0]||(t[0]=[e("p",null,"useIntersectionObserver 函数是基于 Web API 中的 Intersection Observer 的 Vue.js 封装",-1),e("p",null,"它允许您观察一个或多个元素与其父元素或视口的交叉情况",-1),e("p",null,"您可以配置 useIntersectionObserver 来观察元素何时进入或离开视口，以及元素与视口的交叉比例",-1),e("p",null,"这个函数通常用于实现复杂的可见性逻辑，例如在元素滚动到特定位置或达到一定可见性时触发操作",-1),e("p",{class:"font20"}," useIntersectionObserver 可以判断已经出现在可视窗口后，让 Observer 立即停止，即使我们滚动离开目标元素，我们的值也会保持为 true ",-1)])),_:1}),o(i,{title:"响应式监听目标元素的可见性"},{default:a(()=>[e("div",{ref_key:"target",ref:r,class:"div"},null,512)]),_:1})])}}},h=f(I,[["__scopeId","data-v-a63ba27b"]]);export{h as default};
